Criar objetos JavaScript

Objetos são similares a arrays, exceto que, ao invés de usar índices para acessar e modificar seus dados, você acessa os dados em objetos através do que se chama propriedades.

Objetos são úteis para armazenar dados de forma estruturada e podem representar objetos do mundo real, como um gato.

Aqui está um exemplo de objeto gato:

const cat = {

  "name": "Whiskers",

  "legs": 4,

  "tails": 1,

  "enemies": ["Water", "Dogs"]

};

Neste exemplo, todas as propriedades são armazenadas como strings, como name, legs e tails. 

Porém, você também pode usar números como propriedades. 

No entanto, se seu objeto tem quaisquer propriedades que não sejam strings, o JavaScript automaticamente definirá seus tipos como strings.



Acessar propriedades de objetos com notação de pontos

Existem duas formas para acessar as propriedades de um objeto: notação de ponto (.) e notação de colchetes ([]).

Notação de ponto é o que você utiliza quando você sabe o nome da propriedade que você está tentando acessar antecipadamente.

Aqui está um exemplo usando notação de ponto (.) para ler uma propriedade do objeto:

const myObj = {

  prop1: "val1",

  prop2: "val2"

};

const prop1val = myObj.prop1;

const prop2val = myObj.prop2;

prop1val teria o valor val1 e prop2val teria o valor val2.



Acessar propriedades de objeto com notação de colchetes

A segunda forma para acessar as propriedades de um objeto é a notação de colchetes ([]). 

Se a propriedade do objeto que você está tentando acessar possui um espaço no seu nome, você precisará usar a notação de colchetes.

No entanto, você ainda pode usar a notação de colchetes nas propriedades dos objetos sem espaços.

Aqui está um exemplo usando a notação de colchetes para ler uma propriedade de um objeto:

const myObj = {

  "Space Name": "Kirk",

  "More Space": "Spock",

  "NoSpace": "USS Enterprise"

};

myObj["Space Name"];

myObj['More Space'];

myObj["NoSpace"];



Acessar propriedades de objetos com variáveis

Outro uso de notação de colchetes em objetos é para acessar a propriedade a qual está armazenada como o valor de uma variável. 

Isso pode ser muito útil para iterar através das propriedades de um objeto ou quando acessando uma tabela de pesquisa.

Aqui está um exemplo de usar uma variável para acessar uma propriedade:

const dogs = {

  Fido: "Mutt",

  Hunter: "Doberman",

  Snoopie: "Beagle"

};

const myDog = "Hunter";

const myBreed = dogs[myDog];

console.log(myBreed);

A string Doberman seria exibida no console.

Observe que não usamos aspas em torno do nome da variável ao usá-la para acessar a propriedade, porque estamos usando o valor da variável, e não o nome.



Atualizar propriedades do objeto

Depois de criar um objeto JavaScript, você pode atualizar suas propriedades a qualquer momento, como você atualizaria qualquer outra variável. Você pode usar notação de ponto ou colchete para atualizar.

Por exemplo, vamos dar uma olhada em ourDog:

const ourDog = {

  "name": "Camper",

  "legs": 4,

  "tails": 1,

  "friends": ["everything!"]

};

vamos mudar seu nome para o texto Happy Camper. 

ourDog.name = "Happy Camper"; ou ourDog["name"] = "Happy Camper"; 



Adicionar novas propriedades para um objeto JavaScript

Você pode adicionar novas propriedades para um objeto JavaScript existente da mesma forma pela qual você os modificaria.

Aqui está como adicionaríamos uma propriedade bark para ourDog:

ourDog.bark = "bow-wow";

ou

ourDog["bark"] = "bow-wow";



Excluir propriedades de um objeto JavaScript

Podemos também excluir propriedades de objetos dessa forma:

delete ourDog.bark;



Usar objetos para pesquisas

Objetos podem ser pensados como armazenamento de chave/valor, como um dicionário. 

Se você tem um dado tabular, você pode usar um objeto para pesquisar valores ao invés de uma instrução switch ou uma cadeia de if/else. 

Isso é mais útil quando você sabe que o seu dado de entrada é limitado para um certo intervalo.



Aqui está um exemplo de um objeto de artigo:

const article = {

  "title": "How to create objects in JavaScript",

  "link": "https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/",

  "author": "Kaashan Hussain",

  "language": "JavaScript",

  "tags": "TECHNOLOGY",

  "createdAt": "NOVEMBER 28, 2018"

};



Testar objetos por propriedades

Para verificar se uma propriedade em um determinado objeto existe ou não, você pode usar o método .hasOwnProperty() ou . someObject.hasOwnProperty(someProperty) retorna true ou false, dependendo de a propriedade ser encontrada no objeto ou não.



Exemplo

function checkForProperty(object, property) {

  return object.hasOwnProperty(property);

}



Manipular objetos complexos

Às vezes, você pode querer armazenar dados em uma Estrutura de Dados flexível. 

Um objeto JavaScript é uma forma de lidar com dados flexíveis. Eles permitem combinações arbitrárias de strings, numbers, booleans, arrays, functions e objects.

Aqui está um exemplo de estrutura de dados complexas:

const ourMusic = [

  {

    "artist": "Daft Punk",

    "title": "Homework",

    "release_year": 1997,

    "formats": [ 

      "CD", 

      "Cassette", 

      "LP"

    ],

    "gold": true

  }

];

Este é um array que contém um objeto dentro dele. 

O objeto possui vários pedaços de metadados sobre um álbum. 

Também possui um array aninhado formats. 

Se você quiser adicionar mais álbuns, você pode fazer isso adicionando os discos ao array de alto nível. 

Objetos armazenam dados em uma propriedade, a qual possui um formato de chave-valor. 

No exemplo acima, "artist": "Daft Punk" é uma propriedade que tem uma chave artist e um valor de Daft Punk.

Observação: você precisará colocar uma vírgula após cada objeto no array, a não ser que ele seja o último objeto no array.



Acessar objetos aninhados

As subpropriedades de objetos podem ser acessadas ao encadear a notação de ponto e de colchetes.

Aqui está um objeto aninhado:

const ourStorage = {

  "desk": {

    "drawer": "stapler"

  },

  "cabinet": {

    "top drawer": { 

      "folder1": "a file",

      "folder2": "secrets"

    },

    "bottom drawer": "soda"

  }

};



ourStorage.cabinet["top drawer"].folder2;

ourStorage.desk.drawer;

ourStorage.cabinet["top drawer"].folder2 seria a string secrets e ourStorage.desk.drawer seria a string stapler.
