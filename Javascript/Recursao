Substituir laços usando recursão

Recursão é o conceito de que uma função pode ser chamada por ela mesma. 

Para ajudar a entender isso, comece a pensar sobre a seguinte tarefa: multiplique os primeiros n elementos de um array para criar o produto desses elementos. 

Usando um laço for, você poderia fazer isso:

  function multiply(arr, n) {

    let product = 1;

    for (let i = 0; i < n; i++) {

      product *= arr[i];

    }

    return product;

  }

No entanto, note que multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. 

Isso significa que você pode reescrever multiply dentro da própria função e nunca precisar usar um laço.



  function multiply(arr, n) {

    if (n <= 0) {

      return 1;

    } else {

      return multiply(arr, n - 1) * arr[n - 1];

    }

  }

A versão recursiva de multiply fica dessa forma. 

No caso de base, onde n <= 0, ele retorna 1. Para valores maiores de n, a função chama a si mesma, mas com n - 1. 

Essa chamada da função é avaliada da mesma forma, chamando multiply novamente até que n <= 0. 

Nesse ponto, todas as funções podem retornar e a função multiply original retorna a resposta.

Observação: funções recursivas precisam ter um caso de base quando elas retornam sem chamar a função novamente (nesse exemplo, quando n <= 0), caso contrário, elas nunca vão parar de executar.



Usar recursão para criar uma contagem regressiva

Em um desafio anterior, você aprendeu como usar recursão para substituir laços for. 

Agora, vamos analisar uma função mais complexa, a qual retorna um array de inteiros consecutivos começando com 1 até o número passado para a função.

Como mencionado no desafio anterior, haverá um caso de base. 

O caso de base diz a função recursiva quando ela não precisa mais chamar a si. 

É um simples caso onde o valor de retorno já é conhecido. 

Também haverá uma chamada recursiva, a qual executa a função original com argumentos diferentes. 

Se a função for escrita corretamente, eventualmente o caso de base será alcançado.

Por exemplo, vamos dizer que você quer escrever uma função recursiva que retorna um array contendo os números de 1 até n. 

Essa função precisará aceitar um argumento, n, representando o número final. 

Então, ela precisará chamar a si mesma com valores progressivamente menores, começando em n até chegar a 1. 

Você poderia escrever a função da seguinte forma:

function countup(n) {

  if (n < 1) {

    return [ ];

  } else {

    const countArray = countup(n - 1);

    countArray.push(n);

    return countArray;

  }

}

console.log(countup(5));

O valor [1, 2, 3, 4, 5] será exibido no console.



Inicialmente, isso parece contraintuitivo já que o valor de n diminui, mas os valores no array final estão em ordem crescente. 

Isso acontece porque a adição no array (push) acontece por último, após a chamada recursiva ter retornado. 

No ponto onde n é adicionado ao array, countup(n - 1) já foi avaliado e retornou [1, 2, ..., n -1].
