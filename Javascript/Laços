Iterar com laços while em JavaScript

Você pode rodar o mesmo código várias vezes usando um laço.

O primeiro tipo de laço que aprenderemos é chamado de laço while porque ele rodará enquanto uma condição específica for verdadeira e vai parar uma vez que a condição não for mais verdadeira.

const ourArray = [];

let i = 0;



while (i < 5) {

  ourArray.push(i);

  i++;

}

No código de exemplo acima, o laço while executará por 5 vezes e adicionará os números de 0 até 4 a ourArray.



Laços For

Iterar com laços for em JavaScript

Você pode rodar o mesmo código várias vezes usando um laço.

O tipo mais comum de laço JavaScript é chamado de laço for, porque ele é executado por um número especificado de vezes.

Laços for são declarados com três expressões opcionais separadas por ponto e vírgula:

for (a; b; c)

onde a é a declaração de inicialização, 

b é a declaração de condição, 

e c é a expressão final.

A declaração de inicialização é executada apenas uma vez antes de o laço iniciar. Normalmente, é usada para definir e configurar sua variável de laço.

A declaração de condição é verificada no início de cada iteração do laço e vai continuar enquanto seu valor for true. 

Quando a condição for false no início da iteração, o laço vai parar de executar. 

Isso significa que se a condição de início for falsa, seu laço nunca será executado.

A expressão final é executada no final de cada iteração do laço, antes da verificação da próxima condição e normalmente é usada para incrementar ou decrementar o contador do laço.



No exemplo a seguir, inicializamos com i = 0 e iteramos enquanto nossa condição i < 5 for verdadeira. 

Nós incrementaremos i em 1 em cada iteração do laço com i++ como nossa expressão final.

const ourArray = [ ];



for (let i = 0; i < 5; i++) {

  ourArray.push(i);

}

ourArray agora terá o valor de [0, 1, 2, 3, 4].



Iterar números ímpares com um laço for

Laços for não tem de iterar um de cada vez. 

Ao alterar nossa final-expression, nós podemos contar os números pares ou ímpares.

Começaremos em i = 0 e um laço while i < 10. 

Incrementaremos i em 2 a cada iteração com i += 2.



const ourArray = [];

for (let i = 0; i < 10; i += 2) {

  ourArray.push(i);

}

ourArray agora conterá [0, 2, 4, 6, 8].



Contar para trás com um laço for

Um laço for também pode contar pra trás, contanto que possamos definir as condições certas.

Para decrementar em dois cada iteração, nós precisamos alterar nossa inicialização, condição e expressão final.

Nós começaremos em i = 10 e vamos iterar enquanto i > 0. 

Nós decrementamos i por dois em cada iteração com i -= 2.



const ourArray = [];

for (let i = 10; i > 0; i -= 2) {

  ourArray.push(i);

}

ourArray agora vai conter [10, 8, 6, 4, 2].

Vamos mudar nossa inicialização e expressão final para que possamos contar para trás em dois para criar um array de números ímpares decrescentes.



Iterar através de um array com laço for

Uma tarefa comum em JavaScript é para iterar através do conteúdo de um array. 

Uma forma de fazer isso é com um laço for. Esse código vai exibir cada elemento do array arr no console:



const arr = [10, 9, 8, 7, 6];



for (let i = 0; i < arr.length; i++) {

   console.log(arr[i]);

}



Lembre-se de que arrays têm indexação baseada em zero, o que significa que o último índice do array é de length - 1. 

Nossa condição para esse laço é i < arr.length, que interrompe o laço quando i é igual a length. 

Nesse caso a última iteração é i === 4, ou seja, quando i se tornar igual a arr.length - 1 e exibir 6 no console. 

Em seguida, i aumenta para 5, e o laço é interrompido porque i < arr.length é false.

Resposta:

const myArr = [2, 3, 4, 5, 6];

let total = 0

for (let i = 0; i < myArr.length; i++) {

  total+=(myArr[i]);

}





Aninhar laços for

Se você possui um array multidimensional, você pode usar a mesma lógica no ponto de passagem anterior para iterar através de arrays e de qualquer sub-array. Exemplo:

const arr = [

  [1, 2], [3, 4], [5, 6]

];



for (let i = 0; i < arr.length; i++) {

  for (let j = 0; j < arr[i].length; j++) {

    console.log(arr[i][j]);

  }

}

Isso exibe no console cada subelemento dentro de arr, um de cada vez. 

Note que para o laço interno, nós estamos verificando a propriedade .length de arr[i], desde que arr[i] também seja um array.





Do While

Iterar com laços do...while em JavaScript

O próximo tipo de laço que você aprenderá é chamado de laço do...while. 

O laço do...while é chamado assim porque primeiro fará algo (do) ou executará algo uma vez dentro do bloco de código, não importando o que acontecer. 

Em seguida, continuará a executar o laço enquanto (while) a condição for true.



const ourArray = [ ];

let i = 0;



do {

  ourArray.push(i);

  i++;

} while (i < 5);

O exemplo acima se comporta de forma similar a outros tipos de laços, e o array resultante se parecerá com [0, 1, 2, 3, 4]. 

No entanto, o que torna o laço do...while diferente de outros laços é como ele se comporta quando uma condição falha na primeira verificação. 

Vamos ver isso na prática. Aqui está um laço comum while que rodará o código no laço enquanto i < 5:



const ourArray = []; 

let i = 5;



while (i < 5) {

  ourArray.push(i);

  i++;

}

Nesse exemplo, inicializamos o valor de ourArray como um array vazio e o valor de i sendo 5. 

Quando executamos o laço while, a condição é igual a false porque i não é menor que 5, portanto nós não executamos o código dentro do laço. 

O resultado é que ourArray terminará sem valores adicionados a ele, e ainda se parecerá com [ ] quando todas as linhas do código no exemplo acima forem completamente executadas. 

Agora, dê uma olhada no laço do...while:

const ourArray = []; 

let i = 5;



do {

  ourArray.push(i);

  i++;

} while (i < 5);

Nesse caso, nós inicializamos o valor de i para 5, assim como fizemos com o laço while. 

Quando chegamos na próxima linha, não há condição a ser analisada, então nós vamos ao código dentro das chaves e o executamos. 

Nós adicionaremos um único elemento ao array e então incrementamos i antes de chegarmos à verificação da condição. 

Quando nós finalmente temos o resultado da condição i < 5 na última linha, nós notamos que i agora é 6, o que não cumpre a verificação da condição, então nós saímos do laço e terminamos. 

Ao final do exemplo acima, o valor de ourArray é [5]. 

Essencialmente, um laço do...while garante que o código dentro do laço será executado pelo menos uma vez. 

Ter cuidado quando reinicializar variáveis dentro de laços

Às vezes é necessário salvar informações, incrementar contadores ou redefinir variáveis dentro de um laço. 

Um problema em potencial é quando variáveis deveriam ser reinicializadas e, não são, ou vice versa. 

Isso é particularmente perigoso se você acidentalmente redefinir a variável sendo usada para a condição de parada, causando um laço infinito.

Imprimir os valores das variáveis em cada ciclo do seu laço usando console.log() pode ajudar a descobrir comportamentos com bugs relacionados a reiniciar ou falhar ao reiniciar uma variável.



Prevenir laços infinitos com uma condição de término válida

O tópico final é o temido laço infinito. Laços são ótimas ferramentas quando você precisa que o seu programa rode um bloco de código uma quantidade exata de vezes ou até que uma condição seja atendida, mas eles precisam de uma condição de parada que finalize esse laço. Laços infinitos têm alta probabilidade de congelar ou travar o navegador, e causa um caos na execução geral do programa, o que ninguém deseja.



Havia um exemplo de laço infinito na introdução dessa seção - esse laço não tinha uma condição de parada para sair do laço while dentro de loopy(). NÃO chame essa função!



function loopy() {

  while(true) {

    console.log("Hello, world!");

  }

}

É trabalho do programador garantir que a condição de parada, a qual avisa ao programa quando sair de um laço, seja eventualmente alcançada. Um erro é incrementar ou decrementar uma variável contadora na direção errada da condição de parada. Outro erro é acidentalmente reiniciar uma variável contadora ou de índice dentro do laço, ao invés de incrementar ou decrementar.
